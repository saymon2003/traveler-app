@page "/plan/{id:int}"
@rendermode InteractiveServer
@using TravelApp.Data
@using Microsoft.EntityFrameworkCore
@using TravelApp.Components.Layout   <!-- if your DestinationCard is under Components/Layout -->
@inject TravelContext Db
@inject NavigationManager Nav

<h3>Plan Trip for @travelerName</h3>

@if (loading)
{
    <p>Loading…</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger"><strong>Error:</strong> @error</div>
}
else if (traveler is null)
{
    <div class="alert alert-warning">Traveler not found.</div>
    <NavLink href="/travelers">← Back to Travelers</NavLink>
}
else
{
<div class="row">
  <div class="col-md-8">
    <div class="row row-cols-1 row-cols-md-2 g-3">
      @foreach (var d in destinations)
      {
          var enabled  = CanAdd(d);
          var selected = selectedIds.Contains(d.DestinationId);

          <div class="col">
              <!-- If your component is under Components/Layout, this will resolve via @using above.
                   If you put it in Shared/, change this tag to <DestinationCard .../> -->
              <DestinationCard Destination="d"
                               Enabled="enabled"
                               Selected="selected"
                               OnToggle="ToggleDestination" />
          </div>
      }
    </div>
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Trip Itinerary</h5>

        @if (selectedIds.Count == 0)
        {
            <p class="text-muted">No destinations selected yet.</p>
        }
        else
        {
            <ul>
              @foreach (var name in selectedNames) { <li>@name</li> }
            </ul>
            <p><strong>Total Cost:</strong> @totalCost.ToString("C0")</p>
            <p><strong>Experience Types:</strong> @string.Join(", ", selectedExperienceTypes)</p>
        }

        <button class="btn btn-success w-100" @onclick="SaveTrip" disabled="@saving">
            @(saving ? "Saving..." : "Save Trip")
        </button>
      </div>
    </div>

    <NavLink href="/travelers" class="d-block mt-3">← Back to Travelers</NavLink>
  </div>
</div>
}

@code {
    [Parameter] public int id { get; set; }

    private bool loading = true;
    private string? error;

    private Traveler? traveler;
    private string travelerName = "";

    private List<Destination> destinations = new();

    private HashSet<int> selectedIds = new();
    private List<string> selectedNames = new();
    private HashSet<string> selectedExperienceTypes = new();
    private decimal totalCost;
    private bool saving = false;

    protected override async Task OnParametersSetAsync()
    {
        loading = true; error = null;

        try
        {
            traveler = await Db.Travelers.FindAsync(id);

            if (traveler is null)
            {
                loading = false;
                return;
            }

            travelerName = $"{traveler.FirstName} {traveler.LastName}";

            destinations = await Db.Destinations
                                   .AsNoTracking()
                                   .OrderBy(d => d.Name)
                                   .ToListAsync();

            // Load already-saved selections for this traveler
            var existing = await Db.Set<TripPlan>()
                                   .AsNoTracking()
                                   .Where(tp => tp.TravelerId == id)
                                   .ToListAsync();
            selectedIds = existing.Select(tp => tp.DestinationId).ToHashSet();

            Recalculate();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private bool CanAdd(Destination d) => traveler?.Style switch
    {
        "Budget"    => d.CostEstimate < 1500,
        "Adventure" => d.ExperienceType is "Nature" or "Culture",
        "Luxury"    => true,
        _           => false
    };

    private void ToggleDestination(Destination d)
    {
        if (!CanAdd(d)) return;

        if (!selectedIds.Add(d.DestinationId))
            selectedIds.Remove(d.DestinationId);

        Recalculate();
    }

    private void Recalculate()
    {
        var chosen = destinations.Where(d => selectedIds.Contains(d.DestinationId)).ToList();
        totalCost = chosen.Sum(d => (decimal)d.CostEstimate);
        selectedNames = chosen.Select(d => d.Name).ToList();
        selectedExperienceTypes = chosen.Select(d => d.ExperienceType).ToHashSet();
        StateHasChanged();
    }

    private async Task SaveTrip()
    {
        try
        {
            saving = true;

            var set = Db.Set<TripPlan>();

            var old = await set.Where(tp => tp.TravelerId == id).ToListAsync();
            Db.RemoveRange(old);

            foreach (var destId in selectedIds)
                set.Add(new TripPlan { TravelerId = id, DestinationId = destId });

            await Db.SaveChangesAsync();
            Nav.NavigateTo("/travelers");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            saving = false;
        }
    }
}
