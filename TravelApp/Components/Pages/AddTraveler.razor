@page "/travelers/new"
@rendermode InteractiveServer
@using TravelApp.Data
@inject TravelContext Db
@inject NavigationManager Nav

<h3>Add Traveler</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<div class="mb-3">
    <label class="form-label">First Name</label>
    <input class="form-control" @bind="firstName" @bind:event="oninput" />
    @if (showValidation && string.IsNullOrWhiteSpace(firstName))
    {
        <div class="text-danger">The FirstName field is required.</div>
    }
</div>

<div class="mb-3">
    <label class="form-label">Last Name</label>
    <input class="form-control" @bind="lastName" @bind:event="oninput" />
    @if (showValidation && string.IsNullOrWhiteSpace(lastName))
    {
        <div class="text-danger">The LastName field is required.</div>
    }
</div>

<div class="mb-3">
    <label class="form-label">Travel Style</label>
    <select class="form-select" @bind="style" @bind:event="oninput">
        <option value="">-- Select --</option>
        @foreach (var s in styles)
        {
            <option value="@s">@s</option>
        }
    </select>
    @if (showValidation && string.IsNullOrWhiteSpace(style))
    {
        <div class="text-danger">The Style field is required.</div>
    }
</div>

<button class="btn btn-primary"
        type="button"
        disabled="@(!IsValid || saving)"
        @onclick="CreateTraveler">
    @(saving ? "Saving..." : "Create Traveler")
</button>

<NavLink href="/travelers" class="d-block mt-3">‚Üê Back to Travelers</NavLink>

@code {
    private readonly List<string> styles = Helper.GetTravelStyles();

    private string firstName = "";
    private string lastName = "";
    private string style = "";
    private bool showValidation = false;
    private bool saving = false;
    private string? error;

    private bool IsValid =>
        !string.IsNullOrWhiteSpace(firstName) &&
        !string.IsNullOrWhiteSpace(lastName) &&
        !string.IsNullOrWhiteSpace(style);

    private async Task CreateTraveler()
    {
        showValidation = true;
        error = null;

        if (!IsValid) return;

        try
        {
            saving = true;

            var entity = new Traveler
            {
                FirstName = firstName.Trim(),
                LastName  = lastName.Trim(),
                Style     = style
            };

            Db.Travelers.Add(entity);
            await Db.SaveChangesAsync();
            Nav.NavigateTo("/travelers");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            saving = false;
        }
    }
}
